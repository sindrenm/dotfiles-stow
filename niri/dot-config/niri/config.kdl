environment {
  DISPLAY ":0"
}

spawn-at-startup "xwayland-satellite"
spawn-at-startup "waybar"
spawn-at-startup "swww-daemon"

cursor {
  hide-when-typing
}

hotkey-overlay {
  skip-at-startup
}

input {
  keyboard {
    xkb {
      layout "us"
      options "compose:caps"
    }
  }

  touchpad {
    tap
  }
}

output "Dell Inc. DELL U2719DC HN6Q5R2" {
  mode "2560x1600"
  scale 1.0
}

window-rule {
  geometry-corner-radius 8
  clip-to-geometry true
  draw-border-with-background true
}

window-rule {
  match is-active=false

  opacity 0.9
}

window-rule {
  match app-id="^firefox$" title="^Picture-in-Picture$"

  open-floating true
}

layout {
  gaps 16

  preset-column-widths {
    proportion 0.25
    proportion 0.50
    proportion 0.75
    proportion 1.00
  }
}

// Ask the clients to omit their client-side decorations if possible. If the
// client will specifically ask for CSD, the request will be honored.
// Additionally, clients will be informed that they are tiled, removing some
// client-side rounded corners. This option will also fix border/focus ring
// drawing behind some semitransparent windows. After enabling or disabling
// this, you need to restart the apps for this to take effect.
prefer-no-csd

screenshot-path "~/Pictures/Screenshots/Screenshot from %Y-%m-%d %H-%M-%S.png"

binds {
  // Keys consist of modifiers separated by + signs, followed by an XKB key
  // name in the end. To find an XKB name for a particular key, you may use a
  // program like wev.
  //
  // Most actions that you can bind here can also be invoked programmatically
  // with `niri msg action do-something`.

  "Mod+Shift+Slash" { show-hotkey-overlay; }

  "Mod+Return" { spawn "ghostty"; }
  "Mod+Space" { spawn "fuzzel"; }
  "Mod+Alt+L" { spawn "swaylock"; }

  "XF86AudioRaiseVolume" allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.05+"; }
  "XF86AudioLowerVolume" allow-when-locked=true { spawn "wpctl" "set-volume" "@DEFAULT_AUDIO_SINK@" "0.05-"; }
  "XF86AudioMute" allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SINK@" "toggle"; }
  "XF86AudioMicMute" allow-when-locked=true { spawn "wpctl" "set-mute" "@DEFAULT_AUDIO_SOURCE@" "toggle"; }

  "Mod+Q" { close-window; }
  "Mod+E" { toggle-overview; }

  // Change window focus using Vim keybindings
  "Mod+H" { focus-column-left; }
  "Mod+J" { focus-window-or-workspace-down; }
  "Mod+K" { focus-window-or-workspace-up; }
  "Mod+L" { focus-column-right; }

  // Move windows using Vim keybindings
  "Mod+Shift+H" { move-column-left; }
  "Mod+Shift+J" { move-window-down-or-to-workspace-down; }
  "Mod+Shift+K" { move-window-up-or-to-workspace-up; }
  "Mod+Shift+L" { move-column-right; }

  "Mod+Alt+J" { move-workspace-down; }
  "Mod+Alt+K" { move-workspace-up; }

  // Navigate to workspaces by number. Note that workspaces are dynamic, so
  // if one doesn't exist, we will move to the closest one.
  "Mod+1" { focus-workspace 1; }
  "Mod+2" { focus-workspace 2; }
  "Mod+3" { focus-workspace 3; }
  "Mod+4" { focus-workspace 4; }
  "Mod+5" { focus-workspace 5; }
  "Mod+6" { focus-workspace 6; }
  "Mod+7" { focus-workspace 7; }
  "Mod+8" { focus-workspace 8; }
  "Mod+9" { focus-workspace 9; }

  // Move entire column to workspace by number. The same rules about dynamic
  // workspaces apply as with navigating to them.
  "Mod+Shift+1" { move-column-to-workspace 1; }
  "Mod+Shift+2" { move-column-to-workspace 2; }
  "Mod+Shift+3" { move-column-to-workspace 3; }
  "Mod+Shift+4" { move-column-to-workspace 4; }
  "Mod+Shift+5" { move-column-to-workspace 5; }
  "Mod+Shift+6" { move-column-to-workspace 6; }
  "Mod+Shift+7" { move-column-to-workspace 7; }
  "Mod+Shift+8" { move-column-to-workspace 8; }
  "Mod+Shift+9" { move-column-to-workspace 9; }

  // Cycle back and forth between the current and the previously visited
  // workspace, e.g., from workspace 1 to 2 and back to 1 again.
  "Mod+Tab" { focus-workspace-previous; }

  "Mod+Comma" { consume-or-expel-window-left; }
  "Mod+Period" { consume-or-expel-window-right; }

  "Mod+R" { switch-preset-column-width; }
  "Mod+Shift+R" { switch-preset-window-height; }
  "Mod+Ctrl+R" { reset-window-height; }
  "Mod+F" { maximize-column; }
  "Mod+Shift+F" { fullscreen-window; }

  // Expand the focused column to fill up the remaining space not taken up
  // by other fully visible columns.
  "Mod+Ctrl+F" { expand-column-to-available-width; }

  // Center the currently selected column, potentially leaving space on each
  // side of it, depending on neighboring columns.
  "Mod+C" { center-column; }

  // Some finer width and height adjustments
  "Mod+Minus" { set-column-width "-10%"; }
  "Mod+Equal" { set-column-width "+10%"; }
  "Mod+Shift+Minus" { set-window-height "-10%"; }
  "Mod+Shift+Equal" { set-window-height "+10%"; }

  // Toggle currently focused window between being floating and tiled, and
  // also allow for switching focus between what's floating and what's
  // potentially tiled behind it.
  "Mod+V" { toggle-window-floating; }
  "Mod+Shift+V" { switch-focus-between-floating-and-tiling; }

  // Toggle tabbed column display mode. Windows in this column will appear
  // as vertical tabs, rather than stacked on top of each other.
  "Mod+T" { toggle-column-tabbed-display; }

  // Screenshot actions. Note the workaround from
  // https://github.com/sodiboo/niri-flake/issues/922.
  "Print" { screenshot; }
  "Ctrl+Print" { screenshot-screen; }
  "Alt+Print" { screenshot-window; }

  // Applications such as remote-desktop clients and software KVM switches
  // may request that niri stops processing the keyboard shortcuts defined
  // here so they may, for example, forward the key presses as-is to a
  // remote machine. It's a good idea to bind an escape hatch to toggle the
  // inhibitor, so a buggy application can't hold your session hostage.
  "Mod+Escape" allow-inhibiting=false { toggle-keyboard-shortcuts-inhibit; }

  // Show a confirmation message and quit niri.
  "Ctrl+Alt+Delete" { spawn "wlogout"; }
}
